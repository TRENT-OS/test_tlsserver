/*
 * Test TLS Server
 *
 * Copyright (C) 2019-2024, HENSOLDT Cyber GmbH
 * 
 * SPDX-License-Identifier: GPL-2.0-or-later
 *
 * For commercial licensing, contact: info.cyber@hensoldt.net
 */


import <std_connector.camkes>;
import <if_OS_Entropy.camkes>;

#include "config/SystemConfig.h"
#include "config/TestConfig.h"

#include "EntropySource/camkes/EntropySource.camkes"
EntropySource_COMPONENT_DEFINE(EntropySource)

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

#include "TlsServer/camkes/TlsServer.camkes"
TlsServer_COMPONENT_DEFINE(TlsServer)

#include "NetworkStack_PicoTcp/camkes/NetworkStack_PicoTcp.camkes"
NetworkStack_PicoTcp_COMPONENT_DEFINE(
    NetworkStack_PicoTcp,
    NIC_DRIVER_RINGBUFFER_SIZE,
    NetworkStack_PicoTcp_NO_ADDITIONAL_INTERFACES
)


#include "components/Tests/test_TlsServer.camkes"

#include "plat_nic.camkes"

assembly {
    composition {
        //----------------------------------------------------------------------
        // Components used in application
        //----------------------------------------------------------------------
        component TimeServer              timeServer;
        TLS_SERVER_TEST_NIC_INSTANCE(nwDriver)
        component EntropySource           entropySource;
        component NetworkStack_PicoTcp    nwStack;
        component TlsServer               tlsServer;
        component test_TlsServer          unitTest;


        //----------------------------------------------------------------------
        // Establish Connections
        //----------------------------------------------------------------------

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            // platform specific components, macro will add a comma(s) if any
            TLS_SERVER_TEST_NIC_CONNECTION_TIMESERVER(nwDriver)
            nwStack.timeServer_rpc, nwStack.timeServer_notify)

        EntropySource_INSTANCE_CONNECT_CLIENT(
            entropySource,
            tlsServer.entropy_rpc , tlsServer.entropy_port
        )

        NetworkStack_PicoTcp_INSTANCE_CONNECT(
            nwStack,
            nwDriver
        )

        NetworkStack_PicoTcp_INSTANCE_CONNECT_CLIENTS(
            nwStack,
            tlsServer, networkStack
        )

        TlsServer_INSTANCE_CONNECT_CLIENTS(
            tlsServer,
            unitTest, tls
        )
    }

    configuration {

        TimeServer_CLIENT_ASSIGN_BADGES(
            // platform specific components, macro will add a comma(s) if any
            TLS_SERVER_TEST_NIC_TIMESERVER_CLIENTS(nwDriver)
            nwStack.timeServer_rpc
        )
        
        NetworkStack_PicoTcp_CLIENT_ASSIGN_BADGES(
            tlsServer, networkStack
        )

        NetworkStack_PicoTcp_INSTANCE_CONFIGURE_CLIENTS(
            nwStack,
            4
        )
        
        TLS_SERVER_TEST_NIC_CONFIG(nwDriver)

        TlsServer_CLIENT_ASSIGN_BADGES(
            unitTest, tls
        )

        TlsServer_INSTANCE_CONFIGURE(
            tlsServer,
            TLS_HOST_CERT)
    }
}

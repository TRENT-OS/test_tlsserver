import <std_connector.camkes>;

import <TlsServer/camkes/TlsServer.camkes>;

import "components/NwStack/network_stack.camkes";
import "components/Timer/Timer.camkes";
import "components/TimerClient/TimerClient.camkes";

import "components/Tests/test_TlsServer.camkes";

// For client IDs
#include "config/SystemConfig.h"

#include "UART/uart.camkes"
DECLARE_COMPONENT_UART(UART)

#include "NIC_ChanMux/NIC_ChanMux.camkes"
DECLARE_COMPONENT_NIC_ChanMux(NwDriver)

#define CHANMUX_COMPONENT_NAME  ChanMux
#define CHANMUX_UPPER_INTERFACES "components/ChanMux/ChanMux_upper_interface.camkes"
#include "ChanMux/ChanMux.camkes"


assembly {
    composition {
        //----------------------------------------------------------------------
        // UART
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_UART(
            UART, uartDrv)

        //----------------------------------------------------------------------
        // MUX
        //----------------------------------------------------------------------
        DECLARE_AND_CONNECT_INSTANCE_CHANMUX(
            ChanMux, chanMux,
            uartDrv.UartDrv, uartDrv.inputDataPort,
            uartDrv.Output)

        //----------------------------------------------------------------------
        // Timer
        //----------------------------------------------------------------------
        component  Timerbase             timerBase;
        component  Timer                 timer;
        component  TimerClient           timerClient;

        connection seL4HardwareMMIO      timer_mem            (from timer.reg,          to timerBase.reg);
        connection seL4HardwareInterrupt timer_irq            (from timerBase.irq,      to timer.irq);
        connection seL4RPCCall           timerClient_timer    (from timerClient.Timer,  to timer.Timer);
        connection seL4RPCCall           nwStack_timerClient  (from nwStack.Timer,      to timerClient.TimerClient);

        //----------------------------------------------------------------------
        // Network Driver
        //----------------------------------------------------------------------
        component  NwDriver         nwDriver;

        connection seL4Notification NwDriver_Chanmux_dataAvail       (from chanMux.nic_event_hasData,        to nwDriver.chanMux_event_hasData);
        connection seL4RPCCall      nwDriver_chanmux                 (from nwDriver.chanMux_rpc,             to chanMux.chanMux_rpc);
        connection seL4SharedData   NwDriver_Chanmux_port_ctrl       (from nwDriver.chanMux_port_ctrl,       to chanMux.nic_port_ctrl);
        connection seL4SharedData   NwDriver_Chanmux_port_data_read  (from nwDriver.chanMux_port_data_read,  to chanMux.nic_port_data_read);
        connection seL4SharedData   NwDriver_Chanmux_port_data_write (from nwDriver.chanMux_port_data_write, to chanMux.nic_port_data_write);

        //----------------------------------------------------------------------
        // Network Stack
        //----------------------------------------------------------------------
        component  NwStack                  nwStack;

        connection seL4NotificationNative   NwStackdataAvail2 (from nwStack.event_internal, to nwStack.event_tick_or_data);
        connection seL4Notification         NwStackEventsRxd1 (from nwStack.e_write,        to nwStack.c_write);
        connection seL4Notification         NwStackEventsRxd2 (from nwStack.e_read,         to nwStack.c_read);
        connection seL4Notification         NwStackEventsRxd3 (from nwStack.e_conn,         to nwStack.c_conn);

        connection seL4NotificationNative   NwStackdataAvail3 (from timerClient.e_tick_nwstack_1, to nwStack.event_tick_or_data);

        connection seL4NotificationNative   NwStackdataAvail1                (from nwDriver.nic_event_hasData, to nwStack.event_tick_or_data);
        connection seL4RPCCall              NwStack_NwDriver                 (from nwStack.nic_driver,         to nwDriver.nic_rpc);
        connection seL4SharedData           NwDriver_NwStack_ReadConnection  (from nwDriver.nic_port_to,       to nwStack.port_nic_from);
        connection seL4SharedData           NwDriver_NwStack_WriteConnection (from nwDriver.nic_port_from,     to nwStack.port_nic_to);

        //----------------------------------------------------------------------
        // Network Stack App
        //----------------------------------------------------------------------
        component  TlsServer            tlsServer;

        connection seL4Notification     NwAppInitDone        (from nwStack.event_network_init_done,     to tlsServer.event_network_stack_init_done);
        connection seL4RPCCall          NwApp_nwStack        (from tlsServer.network_stack_rpc,         to nwStack.network_stack_rpc);
        connection seL4SharedData       NwApp_dataConnection (from tlsServer.NwAppDataPort,             to nwStack.port_app_io);

        //----------------------------------------------------------------------
        // Connecting TEST_TLS to TlsServer
        //----------------------------------------------------------------------
        component  test_TlsServer       unitTest;

        connection seL4RPCCall          testTls_TlsServer   (from unitTest.TlsServer,       to tlsServer.TlsServer);
        connection seL4RPCCall          testTls_TlsApi      (from unitTest.TlsLibServer,    to tlsServer.TlsLibServer);
        connection seL4SharedData       tlsDataport         (from unitTest.TlsLibDataport,  to tlsServer.TlsLibDataport);
    }

    configuration {
        CONFIGURE_INSTANCE_UART(
            uartDrv,
            CFG_CHANMUX_DEFAULT_UART_PHYS_ADDR,
            CFG_CHANMUX_DEFAULT_UART_INTR)

        timerBase.reg_paddr                 = 0xF8001000;   // paddr of mmio registers
        timerBase.reg_size                  = 0x1000;       // size of mmio registers
        timerBase.irq_irq_number            = 42;           // timer irq number

        /* assign an initial value to semaphore */
        timer.sem_value                     = 0;

        // assign endpoint badges for n:1 RPC interface of ChanMUX. The generic
        // naming scheme is <component>.<interface>_attributes = <badge ID>
        nwDriver.chanMux_rpc_attributes      = CHANMUX_ID_NIC;

        // When assigning IDs for each app, we need to ensure that they have the
        // SAME ID on both interfaces; the TlsServer IF will be used to init
        // crypto and keystore contexts, the CryptoLibServer IF will be used
        // to use those -- so they MUST match!!!
        unitTest.TlsServer_attributes       = TLSSERVER_CLIENT_ID_1;
        unitTest.TlsLibServer_attributes    = TLSSERVER_CLIENT_ID_1;

        tlsServer.config = {
            // Configure how many clients we have
            "numClients":   1,
            "trustedCert":  "-----BEGIN CERTIFICATE-----\r\n" \
                            "MIIDuzCCAqOgAwIBAgIUIlFP3QticKvSug25KJUVB4mqdlswDQYJKoZIhvcNAQEL\r\n" \
                            "BQAwbTELMAkGA1UEBhMCREUxEDAOBgNVBAgMB0JhdmFyaWExDzANBgNVBAcMBk11\r\n" \
                            "bmljaDEcMBoGA1UECgwTSGVuc29sZHQgQ3liZXIgR21iSDELMAkGA1UECwwCQ1Mx\r\n" \
                            "EDAOBgNVBAMMB0NJIFRlc3QwHhcNMjAwMjAzMDk1NTIyWhcNMzAwMTMxMDk1NTIy\r\n" \
                            "WjBtMQswCQYDVQQGEwJERTEQMA4GA1UECAwHQmF2YXJpYTEPMA0GA1UEBwwGTXVu\r\n" \
                            "aWNoMRwwGgYDVQQKDBNIZW5zb2xkdCBDeWJlciBHbWJIMQswCQYDVQQLDAJDUzEQ\r\n" \
                            "MA4GA1UEAwwHQ0kgVGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\r\n" \
                            "AOkdsC9ckEQcFHQcQ3LOGFQB+2DQ+GbzHnE6UxjUD8HNJjkpGBgOvF/VLBl02wlu\r\n" \
                            "SzxACwZ3W9AhXfwJ972vSqYipj0RQyzDy2Nh5VtNPAUNQePwsIku4gpT5KNXkPt/\r\n" \
                            "zU1KdQKKyWx/VjmHUxidtAr5yttqOmhQ1fZ+buYMPO7ohaHSd+QX2Xv5W6QyA6wD\r\n" \
                            "YYNt0TE70dJ/Ww5luI1WYFwh9vNA/tiJTPVv5kRdx2/GsOSYON2esF6lIgPTKD1k\r\n" \
                            "E/zjAOWer3eMPS4rx59F/W0xxSvs71sOhMDPOUp2+82a8qDsOomwypWLz/vqcaxD\r\n" \
                            "91mEw0JorGcesqbO+qCM97ECAwEAAaNTMFEwHQYDVR0OBBYEFAA5WYY71fbT6U+l\r\n" \
                            "arVlDdmlbL4kMB8GA1UdIwQYMBaAFAA5WYY71fbT6U+larVlDdmlbL4kMA8GA1Ud\r\n" \
                            "EwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAJtNxhpoL3+UIx7utP/fwLuR\r\n" \
                            "Qb++yzC7GPtTysWztXfrm+8SA44o9MYjqJC6Xr0m67QVh7dmPmgCevPFpuAZJbea\r\n" \
                            "r+KkAnILyvoxl/p1RmEQXMNQ2/xd3p0FtVZ9FBQX0LdmvvFex1zB1I8ykHvKSu40\r\n" \
                            "jvPtrmG0XDDz1aNoLcRWfltVufAQP8QPbZ0xW79dKOqYdV4kV7Txd3pCRddLQQQj\r\n" \
                            "b72aCDbgGcHYm4Po+AgYWs4pYP62x7T44xdUYR1QuTb/3J5RMgIcvzngZdD64IFI\r\n" \
                            "geBoqyeoBvba6XuFFX7QIX6c39n/Is4aU98GsQHeGY9BCXx9PhNojDKfysyvPGI=\r\n" \
                            "-----END CERTIFICATE-----\r\n"
        };

        // Semaphore to sync RPC with init
        tlsServer.sem_init = 0;
    }
}

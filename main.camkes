/*
 * Test TLS Server
 *
 * Copyright (C) 2019-2021, HENSOLDT Cyber GmbH
 */

#include "config/SystemConfig.h"
import <std_connector.camkes>;

#include "NIC_ChanMux/NIC_ChanMux.camkes"
NIC_ChanMux_COMPONENT_DEFINE(NwDriver, NIC_DRIVER_RINGBUFFER_SIZE)

#include "ChanMux/ChanMux_UART.camkes"
ChanMux_UART_COMPONENT_DEFINE(
    ChanMux_UART,
    nwDriver, ctrl,
    nwDriver, data
)

import <if_OS_Entropy.camkes>;
#include "EntropySource/camkes/EntropySource.camkes"
EntropySource_COMPONENT_DEFINE(EntropySource)

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)

#include "TlsServer/camkes/TlsServer.camkes"
TlsServer_COMPONENT_DEFINE(TlsServer)

#include "os_network_stack/network_stack.camkes"
NwStack_COMPONENT_DEFINE(
    NwStack,
    NIC_DRIVER_RINGBUFFER_SIZE,
    1,
    NwStack_NO_ADDITIONAL_INTERFACES)

import "components/Ticker/Ticker.camkes";
import "components/Tests/test_TlsServer.camkes";


assembly {
    composition {
        //----------------------------------------------------------------------
        // ChanMux + UART
        //----------------------------------------------------------------------
        component ChanMux_UART chanMux_UART;
        component UART_CHANMUX uart;
        ChanMux_UART_INSTANCE_CONNECT(chanMux_UART, uart)

        //----------------------------------------------------------------------
        // Ticker
        //----------------------------------------------------------------------
        component Ticker ticker;

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            ticker.timeServer_rpc,  ticker.timeServer_notify,
            nwStack.timeServer_rpc, nwStack.timeServer_notify
        )

        //----------------------------------------------------------------------
        // Network Driver
        //----------------------------------------------------------------------
        component NwDriver nwDriver;

        ChanMux_UART_INSTANCE_CONNECT_CLIENT(
            chanMux_UART,
            nwDriver, data, ctrl
        )

        //----------------------------------------------------------------------
        // Network Stack
        //----------------------------------------------------------------------
        component NwStack nwStack;

        NwStack_INSTANCE_CONNECT(
            nwStack,
            ticker.e_timeout_nwstacktick
        )

        NIC_ChanMux_INSTANCE_CONNECT_CLIENT(
            nwDriver,
            nwStack.nic_rpc,
            nwStack.nic_to_port,
            nwStack.nic_from_port,
            nwStack.event_tick_or_data
        )

        //----------------------------------------------------------------------
        // TlsServer + Entropy Source
        //----------------------------------------------------------------------
        component TlsServer         tlsServer;
        component EntropySource     entropySource;

        // Neither the network stack nor the socket interface are currently a
        // standard interface. We could use this
        //
        //   NwStack_INSTANCE_CONNECT_SOCKET(
        //       nwStack,
        //       1,
        //       tlsServer.networkStack_rpc,
        //       tlsServer.networkStack_port)
        //
        //   EntropySource_INSTANCE_CONNECT_CLIENT(
        //       entropySource,
        //       tlsServer.entropy_rpc,
        //       tlsServer.entropy_port
        //
        // which uses knowledge about the internals of the TlsServer. It seems
        // better to use the connection helper macro from the TlsServer here
        // instead and use internals from our network stack socket interface
        // and if_OS_Entropy.
        TlsServer_INSTANCE_CONNECT(
            tlsServer,
            entropySource.entropy_rpc, entropySource.entropy_port,
            nwStack.networkStack_rpc, nwStack.port_socket_1
        )

        //----------------------------------------------------------------------
        // TLS Server UnitTest App
        //----------------------------------------------------------------------
        component test_TlsServer    unitTest;

        TlsServer_INSTANCE_CONNECT_CLIENT(
            tlsServer,
            unitTest.tlsServer_rpc, unitTest.tlsServer_port
        )
    }

    configuration {
        ChanMux_UART_CLIENT_ASSIGN_BADGES(
            nwDriver.chanMux_Rpc
        )
        TimeServer_CLIENT_ASSIGN_BADGES(
            ticker.timeServer_rpc,
            nwStack.timeServer_rpc
        )
        TlsServer_CLIENT_ASSIGN_BADGES(
            unitTest.tlsServer_rpc
        )

        TlsServer_INSTANCE_CONFIGURE(
            tlsServer,
            "-----BEGIN CERTIFICATE-----\r\n" \
            "MIIDuzCCAqOgAwIBAgIUIlFP3QticKvSug25KJUVB4mqdlswDQYJKoZIhvcNAQEL\r\n" \
            "BQAwbTELMAkGA1UEBhMCREUxEDAOBgNVBAgMB0JhdmFyaWExDzANBgNVBAcMBk11\r\n" \
            "bmljaDEcMBoGA1UECgwTSGVuc29sZHQgQ3liZXIgR21iSDELMAkGA1UECwwCQ1Mx\r\n" \
            "EDAOBgNVBAMMB0NJIFRlc3QwHhcNMjAwMjAzMDk1NTIyWhcNMzAwMTMxMDk1NTIy\r\n" \
            "WjBtMQswCQYDVQQGEwJERTEQMA4GA1UECAwHQmF2YXJpYTEPMA0GA1UEBwwGTXVu\r\n" \
            "aWNoMRwwGgYDVQQKDBNIZW5zb2xkdCBDeWJlciBHbWJIMQswCQYDVQQLDAJDUzEQ\r\n" \
            "MA4GA1UEAwwHQ0kgVGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\r\n" \
            "AOkdsC9ckEQcFHQcQ3LOGFQB+2DQ+GbzHnE6UxjUD8HNJjkpGBgOvF/VLBl02wlu\r\n" \
            "SzxACwZ3W9AhXfwJ972vSqYipj0RQyzDy2Nh5VtNPAUNQePwsIku4gpT5KNXkPt/\r\n" \
            "zU1KdQKKyWx/VjmHUxidtAr5yttqOmhQ1fZ+buYMPO7ohaHSd+QX2Xv5W6QyA6wD\r\n" \
            "YYNt0TE70dJ/Ww5luI1WYFwh9vNA/tiJTPVv5kRdx2/GsOSYON2esF6lIgPTKD1k\r\n" \
            "E/zjAOWer3eMPS4rx59F/W0xxSvs71sOhMDPOUp2+82a8qDsOomwypWLz/vqcaxD\r\n" \
            "91mEw0JorGcesqbO+qCM97ECAwEAAaNTMFEwHQYDVR0OBBYEFAA5WYY71fbT6U+l\r\n" \
            "arVlDdmlbL4kMB8GA1UdIwQYMBaAFAA5WYY71fbT6U+larVlDdmlbL4kMA8GA1Ud\r\n" \
            "EwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAJtNxhpoL3+UIx7utP/fwLuR\r\n" \
            "Qb++yzC7GPtTysWztXfrm+8SA44o9MYjqJC6Xr0m67QVh7dmPmgCevPFpuAZJbea\r\n" \
            "r+KkAnILyvoxl/p1RmEQXMNQ2/xd3p0FtVZ9FBQX0LdmvvFex1zB1I8ykHvKSu40\r\n" \
            "jvPtrmG0XDDz1aNoLcRWfltVufAQP8QPbZ0xW79dKOqYdV4kV7Txd3pCRddLQQQj\r\n" \
            "b72aCDbgGcHYm4Po+AgYWs4pYP62x7T44xdUYR1QuTb/3J5RMgIcvzngZdD64IFI\r\n" \
            "geBoqyeoBvba6XuFFX7QIX6c39n/Is4aU98GsQHeGY9BCXx9PhNojDKfysyvPGI=\r\n" \
            "-----END CERTIFICATE-----\r\n")
    }
}

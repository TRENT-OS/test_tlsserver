import <std_connector.camkes>;

import <if_OS_Entropy.camkes>;

import "components/NwStack/network_stack.camkes";
import "components/Ticker/Ticker.camkes";

import "components/Tests/test_TlsServer.camkes";

// For client IDs
#include "config/SystemConfig.h"

#include "NIC_ChanMux/NIC_ChanMux.camkes"
DECLARE_COMPONENT_NIC_ChanMux(NwDriver, NIC_DRIVER_RINGBUFFER_SIZE)

#include "ChanMux/ChanMux.camkes"
ChanMux_DEFINE_COMPONENT(ChanMux,
        nwDriver, ctrl,
        nwDriver, data)

#include "EntropySource/camkes/EntropySource.camkes"
EntropySource_COMPONENT_DECLARE(EntropySource)

#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DECLARE(TimeServer)

#include "TlsServer/camkes/TlsServer.camkes"
TlsServer_COMPONENT_DECLARE(TlsServer)

assembly {
    composition {
        //----------------------------------------------------------------------
        // ChanMux + UART
        //----------------------------------------------------------------------
        ChanMux_DECLARE_AND_CONNECT_INSTANCE_TO_UART(ChanMux, chanMux)

        //----------------------------------------------------------------------
        // Ticker
        //----------------------------------------------------------------------
        component  Ticker ticker;

        //----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;

        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            ticker.timeServer_rpc,  ticker.timeServer_notify,
            nwStack.timeServer_rpc, nwStack.timeServer_notify
        )

        //----------------------------------------------------------------------
        // Network Driver
        //----------------------------------------------------------------------
        component  NwDriver         nwDriver;

        ChanMux_INSTANCE_CONNECT_INTERFACE(chanMux, nwDriver)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, nwDriver, data)
        ChanMux_INSTANCE_CONNECT_CHANNEL(chanMux, nwDriver, ctrl)

        //----------------------------------------------------------------------
        // Network Stack
        //----------------------------------------------------------------------
        component  NwStack                  nwStack;

        connection seL4NotificationNative   NwStackdataAvail2 (from nwStack.event_internal, to nwStack.event_tick_or_data);
        connection seL4Notification         NwStackEventsRxd1 (from nwStack.e_write,        to nwStack.c_write);
        connection seL4Notification         NwStackEventsRxd2 (from nwStack.e_read,         to nwStack.c_read);
        connection seL4Notification         NwStackEventsRxd3 (from nwStack.e_conn,         to nwStack.c_conn);

        connection seL4NotificationNative   NwStack_tick      (from ticker.e_timeout_nwstacktick, to nwStack.event_tick_or_data);

        connection seL4NotificationNative   NwStackdataAvail1                (from nwDriver.nic_event_hasData, to nwStack.event_tick_or_data);
        connection seL4RPCCall              NwStack_NwDriver                 (from nwStack.nic_driver,         to nwDriver.nic_rpc);
        connection seL4SharedData           NwDriver_NwStack_ReadConnection  (from nwDriver.nic_port_to,       to nwStack.port_nic_from);
        connection seL4SharedData           NwDriver_NwStack_WriteConnection (from nwDriver.nic_port_from,     to nwStack.port_nic_to);

        //----------------------------------------------------------------------
        // TlsServer
        //----------------------------------------------------------------------
        component EntropySource     entropySource;
        component test_TlsServer    unitTest;
        component TlsServer         tlsServer;

        TlsServer_INSTANCE_CONNECT(
            tlsServer,
            entropySource.entropy_rpc, entropySource.entropy_port,
            nwStack.network_stack_rpc, nwStack.port_app_io, nwStack.event_network_init_done
        )
        TlsServer_INSTANCE_CONNECT_CLIENT(
            tlsServer,
            unitTest.tlsServer_rpc, unitTest.tlsServer_port
        )
    }

    configuration {
        // assign endpoint badges for n:1 RPC interface of ChanMUX. The generic
        // naming scheme is <component>.<interface>_attributes = <badge ID>
        ChanMux_ASSIGN_CLIENT_BADGE(chanMux, nwDriver, CHANMUX_ID_NIC)

        TimeServer_CLIENT_ASSIGN_BADGES(
            ticker.timeServer_rpc,
            nwStack.timeServer_rpc
        )
        TlsServer_CLIENT_ASSIGN_BADGES(
            unitTest.tlsServer_rpc
        )

        TlsServer_INSTANCE_CONFIGURE(
            tlsServer,
            "-----BEGIN CERTIFICATE-----\r\n" \
            "MIIDuzCCAqOgAwIBAgIUIlFP3QticKvSug25KJUVB4mqdlswDQYJKoZIhvcNAQEL\r\n" \
            "BQAwbTELMAkGA1UEBhMCREUxEDAOBgNVBAgMB0JhdmFyaWExDzANBgNVBAcMBk11\r\n" \
            "bmljaDEcMBoGA1UECgwTSGVuc29sZHQgQ3liZXIgR21iSDELMAkGA1UECwwCQ1Mx\r\n" \
            "EDAOBgNVBAMMB0NJIFRlc3QwHhcNMjAwMjAzMDk1NTIyWhcNMzAwMTMxMDk1NTIy\r\n" \
            "WjBtMQswCQYDVQQGEwJERTEQMA4GA1UECAwHQmF2YXJpYTEPMA0GA1UEBwwGTXVu\r\n" \
            "aWNoMRwwGgYDVQQKDBNIZW5zb2xkdCBDeWJlciBHbWJIMQswCQYDVQQLDAJDUzEQ\r\n" \
            "MA4GA1UEAwwHQ0kgVGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\r\n" \
            "AOkdsC9ckEQcFHQcQ3LOGFQB+2DQ+GbzHnE6UxjUD8HNJjkpGBgOvF/VLBl02wlu\r\n" \
            "SzxACwZ3W9AhXfwJ972vSqYipj0RQyzDy2Nh5VtNPAUNQePwsIku4gpT5KNXkPt/\r\n" \
            "zU1KdQKKyWx/VjmHUxidtAr5yttqOmhQ1fZ+buYMPO7ohaHSd+QX2Xv5W6QyA6wD\r\n" \
            "YYNt0TE70dJ/Ww5luI1WYFwh9vNA/tiJTPVv5kRdx2/GsOSYON2esF6lIgPTKD1k\r\n" \
            "E/zjAOWer3eMPS4rx59F/W0xxSvs71sOhMDPOUp2+82a8qDsOomwypWLz/vqcaxD\r\n" \
            "91mEw0JorGcesqbO+qCM97ECAwEAAaNTMFEwHQYDVR0OBBYEFAA5WYY71fbT6U+l\r\n" \
            "arVlDdmlbL4kMB8GA1UdIwQYMBaAFAA5WYY71fbT6U+larVlDdmlbL4kMA8GA1Ud\r\n" \
            "EwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAJtNxhpoL3+UIx7utP/fwLuR\r\n" \
            "Qb++yzC7GPtTysWztXfrm+8SA44o9MYjqJC6Xr0m67QVh7dmPmgCevPFpuAZJbea\r\n" \
            "r+KkAnILyvoxl/p1RmEQXMNQ2/xd3p0FtVZ9FBQX0LdmvvFex1zB1I8ykHvKSu40\r\n" \
            "jvPtrmG0XDDz1aNoLcRWfltVufAQP8QPbZ0xW79dKOqYdV4kV7Txd3pCRddLQQQj\r\n" \
            "b72aCDbgGcHYm4Po+AgYWs4pYP62x7T44xdUYR1QuTb/3J5RMgIcvzngZdD64IFI\r\n" \
            "geBoqyeoBvba6XuFFX7QIX6c39n/Is4aU98GsQHeGY9BCXx9PhNojDKfysyvPGI=\r\n" \
            "-----END CERTIFICATE-----\r\n")
    }
}
